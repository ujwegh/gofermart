// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handlers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers(in *jlexer.Lexer, out *WithdrawalDtoSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(WithdrawalDtoSlice, 0, 1)
			} else {
				*out = WithdrawalDtoSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 WithdrawalDTO
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers(out *jwriter.Writer, in WithdrawalDtoSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawalDtoSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawalDtoSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawalDtoSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawalDtoSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers(l, v)
}
func easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers1(in *jlexer.Lexer, out *WithdrawalDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.OrderID = string(in.String())
		case "sum":
			out.Sum = float64(in.Float64())
		case "processed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ProcessedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers1(out *jwriter.Writer, in WithdrawalDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"sum\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sum))
	}
	{
		const prefix string = ",\"processed_at\":"
		out.RawString(prefix)
		out.Raw((in.ProcessedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawalDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawalDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawalDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawalDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers1(l, v)
}
func easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers2(in *jlexer.Lexer, out *WithdrawRequestDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Order = string(in.String())
		case "sum":
			out.Sum = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers2(out *jwriter.Writer, in WithdrawRequestDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.String(string(in.Order))
	}
	{
		const prefix string = ",\"sum\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawRequestDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawRequestDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawRequestDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawRequestDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers2(l, v)
}
func easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers3(in *jlexer.Lexer, out *BalanceDto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current":
			out.CurrentBalance = float64(in.Float64())
		case "withdrawn":
			out.WithdrawnBalance = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers3(out *jwriter.Writer, in BalanceDto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CurrentBalance))
	}
	{
		const prefix string = ",\"withdrawn\":"
		out.RawString(prefix)
		out.Float64(float64(in.WithdrawnBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceDto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceDto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE77ba387EncodeGithubComUjweghGophermartInternalAppHandlers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceDto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceDto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE77ba387DecodeGithubComUjweghGophermartInternalAppHandlers3(l, v)
}
